/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import org.junit.Test;

import java.util.List;

import static org.junit.Assert.*;
import java.util.*;

public class LibraryTest {
    @Test public void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }
    @Test public void rollTest() {

        assertEquals("The method 'rolls' should return an array of integers with a length of 4 index positions",
                4,
                Library.roll(4).length);


    }
    @Test public void TestcontainsDuplicates() {
        int[] inputArray = {1,1,2};
        boolean actual = Library.containsDuplicates(inputArray);
        assertTrue("the method returns a boolean value of either true or false",
                actual);
    }
    @Test public void TestCalculatingAverages() {
    int[] testArray = {1,2,4};
    int average = 2;
    assertEquals("The method should return the average of the numbers in the array",
            average,
            Library.calculatingAverages(testArray)

    );

    }
    @Test public void TestWeatherData() {
        int[][] testWeatherArray = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        assertEquals(
                "Function should return a message",
                "Low: 51\n" +
                        "High: 72\n" +
                "63 temperature never occured\n" +
                "67 temperature never occured\n" +
                "68 temperature never occured\n" +
                "69 temperature never occured\n",
                LabThree.weatherData(testWeatherArray));
    }
    @Test public void TestVoteCount () {
        List<String> votes = new ArrayList<>();;
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Shrub");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Shrub");
            assertEquals( "method should return the winner and a message of who the winner was, if the count results in a tie it should return a message stating that no winner was declared",
                    "No winner can be declared",
                    LabThree.voteCount(votes)

            );
    }
}